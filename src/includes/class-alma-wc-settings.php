<?php
/**
 * Alma settings
 *
 * @package Alma_WooCommerce_Gateway
 */

use Alma\API\RequestError;

if ( ! defined( 'ABSPATH' ) ) {
	exit;
}

/**
 * Handles settings retrieval from the settings API.
 *
 * @property string live_api_key Live api key
 * @property string test_api_key Test api key
 * @property string enabled Wp-bool-eq (yes or no)
 * @property string debug Wp-bool-eq (yes or no)
 * @property string environment Live or test
 * @property bool   fully_configured Flag to indicate setting are fully configured by the plugin.
 * @property string selected_fee_plan Admin dashboard fee_plan in edition mode.
 * @property string merchant_id Alma merchant ID
 * @property string variable_product_price_query_selector Css query selector
 * @property string cart_not_eligible_message_gift_cards Message to display
 * @property array  excluded_products_list Wp Categories excluded slug's list
 */
class Alma_WC_Settings {
	const OPTIONS_KEY = 'woocommerce_alma_settings'; // Generated by WooCommerce in WC_Settings_API::get_option_key().

	/**
	 * Setting values from get_option.
	 *
	 * @var array
	 */
	protected $settings = array();

	/**
	 * Flag to indicate setting has been loaded from DB.
	 *
	 * @var bool
	 */
	private $are_settings_loaded = false;

	/**
	 * Merchant available plans
	 *
	 * @var array
	 */
	private $allowed_fee_plans;

	/**
	 * Get default settings.
	 *
	 * @return array
	 */
	public static function default_settings() {
		return array(
			'enabled'                               => 'yes',
			'selected_fee_plan'                     => '3x',
			'enabled_3x'                            => 'yes',
			'title'                                 => __( 'Monthly Payments with Alma', 'alma-woocommerce-gateway' ),
			'description'                           => __( 'Pay in multiple monthly payments with your credit card.', 'alma-woocommerce-gateway' ),
			'display_cart_eligibility'              => 'yes',
			'display_product_eligibility'           => 'yes',
			'variable_product_price_query_selector' => Alma_WC_Product_Handler::default_variable_price_selector(),
			'excluded_products_list'                => array(),
			'cart_not_eligible_message_gift_cards'  => __( 'Some products cannot be paid with monthly installments', 'alma-woocommerce-gateway' ),
			'live_api_key'                          => '',
			'test_api_key'                          => '',
			'environment'                           => 'test',
			'debug'                                 => 'no',
			'fully_configured'                      => false,
		);
	}

	/**
	 * __get
	 *
	 * @param string $key Key.
	 *
	 * @return mixed
	 */
	public function __get( $key ) {
		$value = null;

		if ( array_key_exists( $key, $this->settings ) ) {
			$value = $this->settings[ $key ];
		}

		return apply_filters( 'alma_wc_settings_' . $key, $value );
	}

	/**
	 * __set
	 *
	 * @param string $key Key.
	 * @param mixed  $value Value.
	 *
	 * @return void
	 */
	public function __set( $key, $value ) {
		$this->settings[ $key ] = $value;
	}

	/**
	 * __isset
	 *
	 * @param string $key Key.
	 *
	 * @return bool
	 */
	public function __isset( $key ) {
		return array_key_exists( $key, $this->settings );
	}

	/**
	 * __construct
	 *
	 * @return void
	 */
	public function __construct() {
		$this->load();
	}

	/**
	 * Load settings from DB.
	 */
	protected function load() {
		if ( $this->are_settings_loaded ) {
			return;
		}
		$settings                  = (array) get_option( self::OPTIONS_KEY, array() );
		$this->settings            = array_merge( self::default_settings(), $settings );
		$this->are_settings_loaded = true;
	}

	/**
	 * Update from settings.
	 *
	 * @param mixed $settings Settings.
	 *
	 * @return void
	 */
	public function update_from( $settings = array() ) {
		foreach ( $settings as $key => $value ) {
			$this->settings[ $key ] = $value;
		}
	}

	/**
	 * Save settings.
	 *
	 * @return void
	 */
	public function save() {
		update_option( self::OPTIONS_KEY, $this->settings );
	}

	/**
	 * Get API key for live environment.
	 *
	 * @return string
	 */
	protected function get_live_api_key() {
		return $this->live_api_key;
	}

	/**
	 * Get API key for test environment.
	 *
	 * @return string
	 */
	protected function get_test_api_key() {
		return $this->test_api_key;
	}

	/**
	 * Get API string for the current environment.
	 *
	 * @return string
	 */
	public function get_active_api_key() {
		return $this->is_live() ? $this->get_live_api_key() : $this->get_test_api_key();
	}

	/**
	 * Need API key.
	 *
	 * @return bool
	 */
	public function need_api_key() {
		return empty( $this->get_active_api_key() );
	}

	/**
	 * Is plugin enabled.
	 *
	 * @return bool
	 */
	public function is_enabled() {
		return 'yes' === $this->enabled;
	}

	/**
	 * Is pnx enabled.
	 *
	 * @param int $installments Number of installments.
	 *
	 * @return bool
	 */
	private function is_pnx_enabled( $installments ) {
		return 'yes' === $this->__get( "enabled_${installments}x" );
	}

	/**
	 * Get enabled pnx plans list.
	 *
	 * @return array
	 */
	public function enabled_pnx_plans() {
		$pnx_list = array();

		foreach ( $this->get_allowed_installments() as $installments ) {
			if ( $this->is_pnx_enabled( $installments ) ) {
				$pnx_list[] = array(
					'installments_count' => $installments,
					'min_amount'         => $this->get_min_amount( $installments ),
					'max_amount'         => $this->get_max_amount( $installments ),
				);
			}
		}

		return $pnx_list;
	}

	/**
	 * Get min amount for pnx.
	 *
	 * @param int $installments the number of installments.
	 *
	 * @return int
	 */
	public function get_min_amount( $installments ) {
		return $this->__get( "min_amount_${installments}x" );
	}

	/**
	 * Get max amount for pnx.
	 *
	 * @param int $installments the number of installments.
	 *
	 * @return int
	 */
	public function get_max_amount( $installments ) {
		return $this->__get( "max_amount_${installments}x" );
	}

	/**
	 * Get eligible installments for price.
	 *
	 * @param int $amount the amount to pay.
	 *
	 * @return int[]
	 */
	public function get_eligible_installments( $amount ) {
		$enabled_plans         = $this->enabled_pnx_plans();
		$eligible_installments = array();

		foreach ( $enabled_plans as $plan ) {
			if ( $amount >= $plan['min_amount'] && $amount <= $plan['max_amount'] ) {
				$eligible_installments[] = $plan['installments_count'];
			}
		}

		return $eligible_installments;
	}

	/**
	 * Get eligible installments for cart.
	 *
	 * @return int[]
	 */
	public function get_eligible_installments_for_cart() {
		$cart       = new Alma_WC_Model_Cart();
		$cart_total = $cart->get_total();

		return $this->get_eligible_installments( $cart_total );
	}

	/**
	 * Is cart eligible.
	 *
	 * @return bool
	 */
	public function is_cart_eligible() {
		return count( $this->get_eligible_installments_for_cart() ) > 0;
	}

	/**
	 * Is plugin "usable", i.e. is it enabled and correctly configured
	 *
	 * @return bool
	 */
	public function is_usable() {
		$user_cant_see = $this->get_environment() === 'test' && ! current_user_can( 'administrator' );

		return $this->is_enabled() && $this->fully_configured && ! $user_cant_see;
	}

	/**
	 * Is logging enabled.
	 *
	 * @return bool
	 */
	public function is_logging_enabled() {
		return 'yes' === $this->debug;
	}

	/**
	 * Get active environment from setting.
	 *
	 * @return string
	 */
	public function get_environment() {
		return 'live' === $this->environment ? 'live' : 'test';
	}

	/**
	 * Is using live API.
	 *
	 * @return bool
	 */
	public function is_live() {
		return $this->get_environment() === 'live';
	}

	/**
	 * Is using test API.
	 *
	 * @return bool
	 */
	public function is_test() {
		return $this->get_environment() === 'test';
	}

	/**
	 * Retrieve allowed fee plans definition from the merchant
	 *
	 * @return array
	 */
	public function get_allowed_fee_plans() {
		if ( $this->need_api_key() ) {
			return array();
		}
		if ( $this->allowed_fee_plans ) {
			return $this->allowed_fee_plans;
		}
		$this->allowed_fee_plans = array();
		$fee_plans               = null;
		try {
			$fee_plans = alma_wc_plugin()->get_fee_plans();
		} catch ( RequestError $e ) {
			alma_wc_plugin()->handle_settings_exception( $e );
		}
		if ( ! $fee_plans ) {
			return array();
		}
		$this->allowed_fee_plans = array_map( // object to array.
			function( $fee_plan ) {
				return get_object_vars( $fee_plan );
			},
			array_filter( // allowed but p1x only.
				$fee_plans,
				function( $fee_plan ) {
					return $fee_plan->allowed && 1 !== $fee_plan->installments_count;
				}
			)
		);

		return $this->allowed_fee_plans;
	}

	/**
	 * Get allowed fee plans installment counts
	 *
	 * @return array|int[]
	 */
	public function get_allowed_installments() {
		return array_map(
			function( $fee_plan ) {
				return $fee_plan['installments_count'];
			},
			$this->get_allowed_fee_plans()
		);
	}
}
